import pandas as pd

fastqs = pd.read_csv("data/files.txt", names=["file"])
fastqs["prefix"] = fastqs["file"].str.extract("(C202SC19070808_\d/s_[A-Z0-9]+_)")
fastqs = pd.DataFrame({"prefix": fastqs["prefix"].unique()})
# fastqs["end"] = fastqs["file"].str.extract("(\d).fq.gz")
# fastqs = fastqs.pivot(index="prefix", columns="end", values="file")
fastqs["sample_id"] = fastqs["prefix"].str.extract("C202SC19070808_\d/s_([A-Z0-9]+)_")
sample_ids = fastqs["sample_id"].unique()
rat_ids = sample_ids
# sample_ids = sample_ids[:5]

# localrules: retrieve_fastq, retrieve_vcf, retrieve_sj
localrules:
    individual_vcf,
    observed_snp_list,
    vcf_chr_list,
    index_vcf,
    index_bam,

include: "align.smk"
include: "expression.smk"
include: "ASE.smk"
include: "tensorqtl.smk"
include: "qtl2.smk"
include: "afc.smk"

rule all:
    input:
        # expand("data/vcfs_for_star/{sample_id}.vcf.gz", sample_id=sample_ids)
        # expand("data/star_sj/{sample_id}.SJ.out.tab", sample_id=sample_ids)
        # expand("data/star_out/{sample_id}.Aligned.sortedByCoord.out.bam.bai",
        #        sample_id=sample_ids),
        # expand("data/rsem_out/{sample_id}.genes.results.gz", sample_id=sample_ids),
        # "data/rsem_expected_count.gct.gz",
        # "data/rsem_TPM.gct.gz",
        # expand("data/phaser_out/{sample_id}.gene_ae.txt", sample_id=sample_ids),
        # "data/phaser_pop_out/expr_matrix.gw_phased.bed.gz",
        # "data/afc/basic.ASE_aFC.txt",
        # "data/afc/basic3.ASE_aFC.txt",
        # "data/afc/basic4.ASE_aFC.txt",
        # "data/afc/main.ASE_aFC.txt",
        # "data/afc/main3.ASE_aFC.txt",
        # "data/afc/main4.ASE_aFC.txt",
        # "data/afc/main5.ASE_aFC.txt",
        # "data/afc/qtl2.ASE_aFC.txt",
        expand("data/tensorqtl/{method}.cis_qtl.txt.gz",
               # method=["basic", "basic3", "basic4", "main", "main3", "main4"]),
               method=["basic4", "main4", "main5"]),
        expand("data/tensorqtl/{method}/{method}.cis_qtl_pairs.1.parquet",
               method=["basic4", "main5"]),
        "data/tensorqtl/main5.cis_qtl_signif.txt.gz",
        "data/afc/main5.aFC.txt",

rule individual_vcf:
    input:
        "data/genotype/eyes.vcf.gz"
    output:
        "data/genotype/individual/{rat_id}.vcf.gz"
    shell:
        "bcftools view -s {wildcards.rat_id} --min-ac=1 -O z -o {output} {input}"

rule observed_snp_list:
    input:
        expand("data/genotype/imputing/chr{chr}.observed.snplist.txt", chr=range(1, 21))
    output:
        "data/genotype/imputing/observed.snplist.txt"
    shell:
        "cat {input} > {output}"

rule vcf_chr_list:
    input:
        vcf = "{base}.vcf.gz",
        vcfi = "{base}.vcf.gz.tbi"
    output:
        "{base}.chrlist.txt"
    shell:
        "tabix --list-chroms {input.vcf} > {output}"

rule index_vcf:
    input:
        "{base}.vcf.gz"
    output:
        "{base}.vcf.gz.tbi"
    shell:
        "tabix -p vcf {input}"

rule index_bam:
    input:
        "{base}.bam"
    output:
        "{base}.bam.bai"
    shell:
        "samtools index {input}"
